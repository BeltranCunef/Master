View(Diferencia)
View(Diferencia)
# transformacion logaritmica
TasaVariacion <- data.frame("Fecha" = Primas$Fecha[1:nrow(Primas) - 1], "Logaritmos" = log(Primas$Suma_Primas))
# transformacion logaritmica
TasaVariacion <- data.frame("Fecha" = Primas$Fecha, "Logaritmos" = log(Primas$Suma_Primas))
# diferencia
Diferencia <- data.frame("Fecha" = Primas$Fecha[1:nrow(Primas) - 1], "Variacion" = 0)
for (i in seq(2, nrow(TasaVariacion))) {
d <- TasaVariacion[i,2] - TasaVariacion[i - 1,2]
Diferencia[i - 1,2] <- d
}
View(Diferencia)
xDiferencia <- xts(Diferencia$Variacion, order.by = as.Date(Primas$Fecha, "%Y%d%m"), frequency = 4)
xDiferencia <- xts(Diferencia$Variacion, order.by = as.Date(Diferencia$Fecha, "%Y%d%m"), frequency = 4)
xDiferencia <- to.quarterly(xDiferencia)
View(xDiferencia)
zDiferencia <- as.zoo(xDiferencia$xDiferencia.Close)
autoplot(zDiferencia) + ggtitle('Variación trimestral de primas de seguros') + xlab('Trimestres') + ylab('Variacion')
View(xDiferencia)
View(TasaVariacion)
View(xDiferencia)
View(Diferencia)
autoplot(zDiferencia) + ggtitle('Variación trimestral de primas de seguros') + xlab('Trimestres') + ylab('Variacion')
ObservacionesDif <- window(zDiferencia, start = index(zDiferencia[1]), end = index(zDiferencia[length(zPrimas) - 3]))
# selecciono automaticamente el arima
arimafit <- auto.arima(ObservacionesDif, lambda = 0)
# visualizo el arima
summary(arimafit)
ObservacionesDif <- window(zDiferencia, start = index(zDiferencia[1]), end = index(zDiferencia[length(zPrimas) - 3]))
ObservacionesDif <- window(zDiferencia, start = index(zDiferencia[1]), end = index(zDiferencia[length(zDiferencia) - 3]))
# selecciono automaticamente el arima
arimafit <- auto.arima(ObservacionesDif, lambda = 0)
# visualizo el arima
summary(arimafit)
ggtsdisplay(arimafit$residuals)
ObservacionesDif
ObservacionesDif <- window(zDiferencia, start = index(zDiferencia[1]),
end = index(zDiferencia[length(zDiferencia) - 4]))
# selecciono automaticamente el arima
arimafit <- auto.arima(ObservacionesDif, lambda = 0)
# visualizo el arima
summary(arimafit)
View(arimafit)
ObservacionesDif <- window(zDiferencia, start = index(zDiferencia[1]),
end = index(zDiferencia[length(zDiferencia) - 4]))
ObservacionesDif
View(Diferencia)
library(readr)
library(dplyr)
library(tidyverse)
library(forecast)
library(ggplot2)
library(xts)
library(ggfortify)
set.seed(123)
Primas <- read_delim("data/Primas_mapfre.csv",
";", escape_double = FALSE, col_types = cols(Fecha = col_date(format = "%m/%d/%Y")),
trim_ws = TRUE)
View(Primas)
Primas$Suma_Primas <- Primas$Primas_vida + Primas$Primas_no_vida
View(Primas)
# transformacion logaritmica
TasaVariacion <- data.frame("Fecha" = Primas$Fecha, "Logaritmos" = log(Primas$Suma_Primas))
# diferencia
Diferencia <- data.frame("Fecha" = Primas$Fecha[1:nrow(Primas) - 1], "Variacion" = 0)
for (i in seq(2, nrow(TasaVariacion))) {
d <- TasaVariacion[i,2] - TasaVariacion[i - 1,2]
Diferencia[i - 1,2] <- d
}
View(Diferencia)
xDiferencia <- xts(Diferencia$Variacion, order.by = as.Date(Diferencia$Fecha, "%Y%d%m"), frequency = 4)
xDiferencia <- to.quarterly(xDiferencia)
View(xDiferencia)
zDiferencia <- as.zoo(xDiferencia$xDiferencia.Close)
zDiferencia
ObservacionesDif <- window(zDiferencia, start = index(zDiferencia[1]),
end = index(zDiferencia[length(zDiferencia) - 3]))
ObservacionesDif
arimafit <- auto.arima(ObservacionesDif, lambda = 0)
ObservacionesDif <- window(zDiferencia, start = index(zDiferencia[1]),
end = index(zDiferencia[length(zDiferencia) - 3]))
# selecciono automaticamente el arima
arimafit <- auto.arima(ObservacionesDif)
# visualizo el arima
summary(arimafit)
ggtsdisplay(arimafit$residuals)
Primas <- read_delim("data/Primas_mapfre.csv",
";", escape_double = FALSE, col_types = cols(Fecha = col_date(format = "%m/%d/%Y")),
trim_ws = TRUE)
View(Primas)
Primas$Suma_Primas <- Primas$Primas_vida + Primas$Primas_no_vida
# convierto el dataframe a un objeto xts
xPrimas <- xts(Primas$Suma_Primas, order.by = as.Date(Primas$Fecha, "%Y%d%m"), frequency = 4)
# convierto la serie en trimestral
xPrimas <- to.quarterly(xPrimas)
# paso a formato zoo y me quedo unicamente con una de las columnas
zPrimas <- as.zoo(xPrimas$xPrimas.Close)
# creo una serie observada, empiezo en el primer elemento y finalizo 4 elementos antes
Observaciones <- window(zPrimas, start = index(zPrimas[1]), end = index(zPrimas[length(zPrimas) - 4]))
# selecciono automaticamente el ets
etsfit <- ets(Observaciones)
# prediccion del modelo
ForePrimas <- forecast(etsfit)
summary(ForePrimas)
plot(ForePrimas)
lines(window(zPrimas),type = "o")
View(xPrimas)
matrix(c(etsfit$mean[1:4], zPrimas[(length(zPrimas) - 5):length(zPrimas)]), ncol = 2)
# selecciono automaticamente el ets
etsfit <- ets(Observaciones, damped = TRUE)
# prediccion del modelo
ForePrimas <- forecast(etsfit)
summary(ForePrimas)
plot(ForePrimas)
lines(window(zPrimas),type = "o")
etsfit <- ets(Observaciones)
ForePrimas <- forecast(etsfit)
ForePrimas <- forecast(etsfit)
```{r MODELO}
summary(ForePrimas)
plot(ForePrimas)
lines(window(zPrimas),type = "o")
library(readr)
library(dplyr)
library(tidyverse)
library(forecast)
library(ggplot2)
library(xts)
library(ggfortify)
set.seed(123)
Primas <- read_delim("data/Primas_mapfre.csv",
";", escape_double = FALSE, col_types = cols(Fecha = col_date(format = "%m/%d/%Y")),
trim_ws = TRUE)
View(Primas)
Primas$Suma_Primas <- Primas$Primas_vida + Primas$Primas_no_vida
View(Primas)
# convierto el dataframe a un objeto xts
xPrimas <- xts(Primas$Suma_Primas, order.by = as.Date(Primas$Fecha, "%Y%d%m"), frequency = 4)
# convierto la serie en trimestral
xPrimas <- to.quarterly(xPrimas)
# paso a formato zoo y me quedo unicamente con una de las columnas
zPrimas <- as.zoo(xPrimas$xPrimas.Close)
autoplot(zPrimas) + ggtitle('Primas trimestrales de seguros') + xlab('Trimestres') + ylab('Primas')
ggfreqplot(as.ts(zPrimas), freq = 4, nrow = 1, facet.labeller = c("1T","2T","3T","4T")) +
ggtitle("Primas Trimestrales")
# creo una serie observada, empiezo en el primer elemento y finalizo 4 elementos antes
Observaciones <- window(zPrimas, start = index(zPrimas[1]), end = index(zPrimas[length(zPrimas) - 4]))
# selecciono automaticamente el ets
etsfit <- ets(Observaciones)
# prediccion del modelo
ForePrimas <- forecast(etsfit)
summary(ForePrimas)
plot(ForePrimas)
lines(window(zPrimas),type = "o")
matrix(c(etsfit$mean[1:4], zPrimas[(length(zPrimas) - 5):length(zPrimas)]), ncol = 2)
ObservacionesDif <- window(zPrimas, start = index(zPrimas[1]),
end = index(zPrimas[length(zPrimas) - 4]))
# selecciono automaticamente el arima
arimafit <- auto.arima(ObservacionesDif)
# visualizo el arima
summary(arimafit)
ggtsdisplay(arimafit$residuals)
Box.test(arimafit$residuals,lag = 4, fitdf = 1, type = "Lj")
Box.test(arimafit$residuals,lag = 6, fitdf = 1, type = "Lj")
Box.test(arimafit$residuals,lag = 12, fitdf = 1, type = "Lj")
Box.test(arimafit$residuals,lag = 3, fitdf = 1, type = "Lj")
Box.test(arimafit$residuals,lag = 6, fitdf = 1, type = "Lj")
Box.test(arimafit$residuals,lag = 12, fitdf = 1, type = "Lj")
ForePrimasArima <- forecast(arimafit)
summary(ForePrimasArima)
df_newl <- data.frame(value = as.vector(zPrimas),
time = time(zPrimas))
ggplot(df_newl) + geom_point(aes(x = time, y = value)) + geom_line(aes(x = time, y = value)) +
ylab("Primas") + ggtitle("Primas Trimestrales LOG CocaCola") + xlab("Trimestres")
df_newl <- data.frame(value = as.vector(zPrimas),
time = time(zPrimas))
ggplot(df_new) + geom_point(aes(x = time, y = value)) + geom_line(aes(x = time,y = value)) +
geom_forecast(ForePrimasArima,alpha = 0.4) + ggtitle("ARIMA: Predicción primas seguros")
df_new <- data.frame(value = as.vector(zPrimas),
time = time(zPrimas))
ggplot(df_new) + geom_point(aes(x = time, y = value)) + geom_line(aes(x = time,y = value)) +
geom_forecast(ForePrimasArima,alpha = 0.4) + ggtitle("ARIMA: Predicción primas seguros")
df_new <- data.frame(value = as.vector(zPrimas),
time = time(zPrimas))
ggplot(df_new) + geom_point(aes(x = time, y = value)) + geom_line(aes(x = time,y = value)) +
geom_forecast(ForePrimasArima,alpha = 0.4) + ggtitle("ARIMA: Predicción primas seguros")
ForePrimasArima
ObservacionesDif <- window(zPrimas, start = index(zPrimas[1]),
end = index(zPrimas[length(zPrimas) - 4]))
# selecciono automaticamente el arima
arimafit <- auto.arima(ObservacionesDif, lambda = 0)
# visualizo el arima
summary(arimafit)
ggtsdisplay(arimafit$residuals)
Box.test(arimafit$residuals,lag = 3, fitdf = 1, type = "Lj")
Box.test(arimafit$residuals,lag = 6, fitdf = 1, type = "Lj")
Box.test(arimafit$residuals,lag = 11, fitdf = 1, type = "Lj")
ForePrimasArima <- forecast(arimafit)
summary(ForePrimasArima)
df_new <- data.frame(value = as.vector(zPrimas),
time = time(zPrimas))
ggplot(df_new) + geom_point(aes(x = time, y = value)) + geom_line(aes(x = time,y = value)) +
geom_forecast(ForePrimasArima,alpha = 0.4) + ggtitle("ARIMA: Predicción primas seguros")
knitr::opts_chunk$set(echo = TRUE)
Primas <- read_delim("data/Primas_mapfre.csv",
";", escape_double = FALSE, locale = locale(decimal_mark = ","),
trim_ws = TRUE)
library(readr)
library(dplyr)
library(tidyverse)
library(forecast)
library(ggplot2)
library(xts)
library(ggfortify)
set.seed(123)
Primas <- read_delim("data/Primas_mapfre.csv",
";", escape_double = FALSE, locale = locale(decimal_mark = ","),
trim_ws = TRUE)
View(Primas)
Primas$Suma_Primas <- Primas$Primas_vida + Primas$Primas_no_vida
View(Primas)
ggplot(data = Primas, aes(x = Primas$Fecha)) + geom_smooth(aes(y = Primas$Primas_vida, colour = 'Primas_vida')) +
geom_smooth(aes(y = Primas$Primas_no_vida, colour = 'Primas_no_vida')) + geom_smooth(aes(y = Primas$Suma_Primas, colour = 'Suma_Primas')) + xlab('Fecha') + ylab('Primas')
Primas <- read_delim("data/Primas_mapfre.csv",
";", escape_double = FALSE, col_types = cols(Fecha = col_date(format = "%m/%d/%Y")),
locale = locale(decimal_mark = ","),
trim_ws = TRUE)
View(Primas)
Primas$Suma_Primas <- Primas$Primas_vida + Primas$Primas_no_vida
View(Primas)
ggplot(data = Primas, aes(x = Primas$Fecha)) + geom_smooth(aes(y = Primas$Primas_vida, colour = 'Primas_vida')) +
geom_smooth(aes(y = Primas$Primas_no_vida, colour = 'Primas_no_vida')) + geom_smooth(aes(y = Primas$Suma_Primas, colour = 'Suma_Primas')) + xlab('Fecha') + ylab('Primas')
# convierto el dataframe a un objeto xts
xPrimas <- xts(Primas$Suma_Primas, order.by = as.Date(Primas$Fecha, "%Y%d%m"), frequency = 4)
# convierto la serie en trimestral
xPrimas <- to.quarterly(xPrimas)
# paso a formato zoo y me quedo unicamente con una de las columnas
zPrimas <- as.zoo(xPrimas$xPrimas.Close)
View(xPrimas)
autoplot(zPrimas) + ggtitle('Primas trimestrales de seguros') + xlab('Trimestres') + ylab('Primas')
ggfreqplot(as.ts(zPrimas), freq = 4, nrow = 1, facet.labeller = c("1T","2T","3T","4T")) +
ggtitle("Primas Trimestrales")
# creo una serie observada, empiezo en el primer elemento y finalizo 4 elementos antes
Observaciones <- window(zPrimas, start = index(zPrimas[1]), end = index(zPrimas[length(zPrimas) - 4]))
# selecciono automaticamente el ets
etsfit <- ets(Observaciones)
# prediccion del modelo
ForePrimas <- forecast(etsfit)
summary(ForePrimas)
plot(ForePrimas)
lines(window(zPrimas),type = "o")
matrix(c(etsfit$mean[1:4], zPrimas[(length(zPrimas) - 5):length(zPrimas)]), ncol = 2)
ObservacionesDif <- window(zPrimas, start = index(zPrimas[1]),
end = index(zPrimas[length(zPrimas) - 4]))
# selecciono automaticamente el arima
arimafit <- auto.arima(ObservacionesDif, lambda = 0)
# visualizo el arima
summary(arimafit)
ggtsdisplay(arimafit$residuals)
Box.test(arimafit$residuals,lag = 3, fitdf = 1, type = "Lj")
Box.test(arimafit$residuals,lag = 6, fitdf = 1, type = "Lj")
Box.test(arimafit$residuals,lag = 12, fitdf = 1, type = "Lj")
Box.test(arimafit$residuals,lag = 3, fitdf = 4, type = "Lj")
Box.test(arimafit$residuals,lag = 6, fitdf = 4, type = "Lj")
Box.test(arimafit$residuals,lag = 12, fitdf = 4, type = "Lj")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(tidyverse)
library(forecast)
library(ggplot2)
library(xts)
library(ggfortify)
set.seed(123)
Primas <- read_delim("data/Primas_mapfre.csv",
";", escape_double = FALSE, col_types = cols(Fecha = col_date(format = "%m/%d/%Y")),
locale = locale(decimal_mark = ","),
trim_ws = TRUE)
View(Primas)
Primas$Suma_Primas <- Primas$Primas_vida + Primas$Primas_no_vida
View(Primas)
ggplot(data = Primas, aes(x = Primas$Fecha)) + geom_smooth(aes(y = Primas$Primas_vida, colour = 'Primas_vida')) +
geom_smooth(aes(y = Primas$Primas_no_vida, colour = 'Primas_no_vida')) + geom_smooth(aes(y = Primas$Suma_Primas, colour = 'Suma_Primas')) + xlab('Fecha') + ylab('Primas')
# convierto el dataframe a un objeto xts
xPrimas <- xts(Primas$Suma_Primas, order.by = as.Date(Primas$Fecha, "%Y%d%m"), frequency = 4)
# convierto la serie en trimestral
xPrimas <- to.quarterly(xPrimas)
# paso a formato zoo y me quedo unicamente con una de las columnas
zPrimas <- as.zoo(xPrimas$xPrimas.Close)
autoplot(zPrimas) + ggtitle('Primas trimestrales de seguros') + xlab('Trimestres') + ylab('Primas')
ggfreqplot(as.ts(zPrimas), freq = 4, nrow = 1, facet.labeller = c("1T","2T","3T","4T")) +
ggtitle("Primas Trimestrales")
# creo una serie observada, empiezo en el primer elemento y finalizo 4 elementos antes
Observaciones <- window(zPrimas, start = index(zPrimas[1]), end = index(zPrimas[length(zPrimas) - 4]))
# selecciono automaticamente el ets
etsfit <- ets(Observaciones)
# prediccion del modelo
ForePrimas <- forecast(etsfit)
summary(ForePrimas)
plot(ForePrimas)
lines(window(zPrimas),type = "o")
lines(ForePrimas$mean,type="o",col="red")
plot(ForePrimas)
lines(window(zPrimas),type = "o")
matrix(c(etsfit$mean[1:4], zPrimas[(length(zPrimas) - 5):length(zPrimas)]), ncol = 2)
matrix(c(etsfit$mean[1:4], zPrimas[(length(zPrimas) - 5):length(zPrimas)]), ncol = 2,
dimnames = list(c("row1", "row2", "row3"), c("Predicho", "Real")))
zPrimas
matrix(c(etsfit$mean[1:5], zPrimas[(length(zPrimas) - 6):length(zPrimas)]), ncol = 2,
dimnames = list(c("row1", "row2", "row3"), c("Predicho", "Real")))
matrix(c(etsfit$mean[1:5], zPrimas[(length(zPrimas) - 5):length(zPrimas)]), ncol = 2,
dimnames = list(c("row1", "row2", "row3"), c("Predicho", "Real")))
matrix(c(etsfit$mean[1:4], zPrimas[(length(zPrimas) - 5):length(zPrimas)]), ncol = 2,
dimnames = list(c("row1", "row2", "row3"), c("Predicho", "Real")))
matrix(c(etsfit$mean[1:4], zPrimas[(length(zPrimas) - 5):length(zPrimas)]), ncol = 2,
dimnames = list(c("2017 Q2", "2017 Q3", "2017 Q4"), c("Predicho", "Real")))
ObservacionesDif <- window(zPrimas, start = index(zPrimas[1]),
end = index(zPrimas[length(zPrimas) - 4]))
# selecciono automaticamente el arima
arimafit <- auto.arima(ObservacionesDif, lambda = 0)
# visualizo el arima
summary(arimafit)
ggtsdisplay(arimafit$residuals)
Box.test(arimafit$residuals,lag = 3, fitdf = 1, type = "Lj")
Box.test(arimafit$residuals,lag = 6, fitdf = 1, type = "Lj")
Box.test(arimafit$residuals,lag = 12, fitdf = 1, type = "Lj")
ForePrimasArima <- forecast(arimafit)
summary(ForePrimasArima)
df_new <- data.frame(value = as.vector(zPrimas),
time = time(zPrimas))
ggplot(df_new) + geom_point(aes(x = time, y = value)) + geom_line(aes(x = time,y = value)) +
geom_forecast(ForePrimasArima,alpha = 0.4) + ggtitle("ARIMA: Predicción primas seguros")
checkresiduals(etsfit)
checkresiduals(arimafit)
# Guardo los errores de ETS como e1
e1 <- tsCV(Observaciones, ForePrimas, h = 1)
# Guardo los errores de ARIMA como e2
e2 <- tsCV(Observaciones, ForePrimasArima, h = 1)
# error por ETS
mean(e1^2, na.rm = TRUE)
# error por ARIMA
mean(e2^2, na.rm = TRUE)
e1
# Guardo los errores de ETS como e1
e1 <- tsCV(Observaciones, ForePrimas)
# Guardo los errores de ARIMA como e2
e2 <- tsCV(Observaciones, ForePrimasArima)
e1
# la series a observar
Observaciones <- window(zPrimas, start = index(zPrimas[1]))
# Guardo los errores de ETS como e1
e1 <- tsCV(Observaciones, ForePrimas)
# Guardo los errores de ARIMA como e2
e2 <- tsCV(Observaciones, ForePrimasArima)
e1
zPrimas
prueba <- window(zPrimas, start = 2006)
prueba
prueba <- window(zPrimas, start = 2008, end = 2016)
prueba
prueba <- window(zPrimas, start = 2008, end = c(2015,4))
prueba
fets <- function(x, h) {
forecast(ets(x), h = h)
}
farima <- function(x, h) {
forecast(auto.arima(x), h=h)
}
# Guardo los errores de ETS como e1
e1 <- tsCV(Observaciones, fets, h = 1)
# Guardo los errores de ARIMA como e2
e2 <- tsCV(Observaciones, farima, h = 1)
e1
# error por ETS
mean(e1^2, na.rm = TRUE)
# error por ARIMA
mean(e2^2, na.rm = TRUE)
summary(ForePrimas)
# creo una serie observada, empiezo en el primer elemento y finalizo 4 elementos antes
Observaciones <- window(zPrimas, start = index(zPrimas[1]), end = index(zPrimas[length(zPrimas) - 4]))
# selecciono automaticamente el ets
etsfit <- ets(Observaciones)
# prediccion del modelo
ForePrimas <- forecast(etsfit, h = 8)
summary(ForePrimas)
plot(ForePrimas)
lines(window(zPrimas),type = "o")
matrix(c(etsfit$mean[1:4], zPrimas[(length(zPrimas) - 5):length(zPrimas)]), ncol = 2,
dimnames = list(c("2017 Q2", "2017 Q3", "2017 Q4"), c("Predicho", "Real")))
# selecciono automaticamente el arima
arimafit <- auto.arima(Observaciones, lambda = 0)
# visualizo el arima
summary(arimafit)
ForePrimasArima <- forecast(arimafit, h = 8)
summary(ForePrimasArima)
# Guardo los errores de ETS como e1
e1 <- tsCV(Observaciones, ForePrimas)
# Guardo los errores de ARIMA como e2
e2 <- tsCV(Observaciones, ForePrimasArima)
e1
# selecciono automaticamente el ets
etsfit <- ets(Observaciones)
# prediccion del modelo
ForePrimas <- forecast(etsfit)
# selecciono automaticamente el arima
arimafit <- auto.arima(Observaciones, lambda = 0)
# visualizo el arima
summary(arimafit)
ForePrimasArima <- forecast(arimafit)
summary(ForePrimasArima)
# Guardo los errores de ETS como e1
e1 <- tsCV(Observaciones, fets, h = 8)
# Guardo los errores de ARIMA como e2
e2 <- tsCV(Observaciones, farima, h = 8)
e1
# error por ETS
mean(e1^2, na.rm = TRUE)
# error por ARIMA
mean(e2^2, na.rm = TRUE)
# Guardo los errores de ETS como e1
e1 <- tsCV(Observaciones, fets, h = 1)
# Guardo los errores de ARIMA como e2
e2 <- tsCV(Observaciones, farima, h = 1)
e1
# error por ETS
mean(e1^2, na.rm = TRUE)
# error por ARIMA
mean(e2^2, na.rm = TRUE)
# Guardo los errores de ETS como e1
e1 <- tsCV(Observaciones, fets, h = 2)
# Guardo los errores de ARIMA como e2
e2 <- tsCV(Observaciones, farima, h = 2)
e1
# Guardo los errores de ETS como e1
e1 <- tsCV(Observaciones, fets, h = 1)
# Guardo los errores de ARIMA como e2
e2 <- tsCV(Observaciones, farima, h = 1)
ForePrimasArima <- forecast(arimafit, h = 1)
summary(ForePrimasArima)
ForePrimasArima <- forecast(arimafit, h = 8)
summary(ForePrimasArima)
ForePrimasArima <- forecast(arimafit, h = 12)
summary(ForePrimasArima)
ForePrimasArima <- forecast(arimafit)
summary(ForePrimasArima)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(forecast)
library(ggplot2)
library(xts)
library(ggfortify)
Primas <- read_delim("data/Primas_mapfre.csv",
";", escape_double = FALSE, col_types = cols(Fecha = col_date(format = "%m/%d/%Y")),
locale = locale(decimal_mark = ","),
trim_ws = TRUE)
View(Primas)
Primas$Suma_Primas <- Primas$Primas_vida + Primas$Primas_no_vida
View(Primas)
ggplot(data = Primas, aes(x = Primas$Fecha)) + geom_smooth(aes(y = Primas$Primas_vida, colour = 'Primas_vida')) +
geom_smooth(aes(y = Primas$Primas_no_vida, colour = 'Primas_no_vida')) + geom_smooth(aes(y = Primas$Suma_Primas, colour = 'Suma_Primas')) + xlab('Fecha') + ylab('Primas')
# convierto el dataframe a un objeto xts
xPrimas <- xts(Primas$Suma_Primas, order.by = as.Date(Primas$Fecha, "%Y%d%m"), frequency = 4)
# convierto la serie en trimestral
xPrimas <- to.quarterly(xPrimas)
# paso a formato zoo y me quedo unicamente con una de las columnas
zPrimas <- as.zoo(xPrimas$xPrimas.Close)
autoplot(zPrimas) + ggtitle('Primas trimestrales de seguros') + xlab('Trimestres') + ylab('Primas')
ggfreqplot(as.ts(zPrimas), freq = 4, nrow = 1, facet.labeller = c("1T","2T","3T","4T")) +
ggtitle("Primas Trimestrales")
# creo una serie observada, empiezo en el primer elemento y finalizo 4 elementos antes
Observaciones <- window(zPrimas, start = index(zPrimas[1]), end = index(zPrimas[length(zPrimas) - 4]))
# selecciono automaticamente el ets
etsfit <- ets(Observaciones)
# prediccion del modelo
ForePrimas <- forecast(etsfit)
summary(ForePrimas)
plot(ForePrimas)
lines(window(zPrimas),type = "o")
matrix(c(etsfit$mean[1:4], zPrimas[(length(zPrimas) - 5):length(zPrimas)]), ncol = 2,
dimnames = list(c("2017 Q2", "2017 Q3", "2017 Q4"), c("Predicho", "Real")))
# selecciono automaticamente el arima
arimafit <- auto.arima(Observaciones, lambda = 0)
# visualizo el arima
summary(arimafit)
ggtsdisplay(arimafit$residuals)
Box.test(arimafit$residuals,lag = 3, fitdf = 1, type = "Lj")
Box.test(arimafit$residuals,lag = 6, fitdf = 1, type = "Lj")
Box.test(arimafit$residuals,lag = 12, fitdf = 1, type = "Lj")
ForePrimasArima <- forecast(arimafit)
summary(ForePrimasArima)
df_new <- data.frame(value = as.vector(zPrimas),
time = time(zPrimas))
ggplot(df_new) + geom_point(aes(x = time, y = value)) + geom_line(aes(x = time,y = value)) +
geom_forecast(ForePrimasArima,alpha = 0.4) + ggtitle("ARIMA: Predicción primas seguros")
checkresiduals(etsfit)
checkresiduals(arimafit)
fets <- function(x, h) {
forecast(ets(x), h = h)
}
farima <- function(x, h) {
forecast(auto.arima(x), h = h)
}
# Guardo los errores de ETS como e1
e1 <- tsCV(Observaciones, fets, h = 1)
# Guardo los errores de ARIMA como e2
e2 <- tsCV(Observaciones, farima, h = 1)
# error por ETS
mean(e1^2, na.rm = TRUE)
# error por ARIMA
mean(e2^2, na.rm = TRUE)
View(Primas)
